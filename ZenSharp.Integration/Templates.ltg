
// Sample file
space ::= " "

// Resharper macros
cursor ::= "$END$"

identifier ::= $name default="$name$" macros = "complete()"$
suggType ::= $type default="$type$" macros = "completeType(""\0"")"$ suggTypeFollower
suggTypeFollower ::= ""="_"


// Auto properties
property        ::= accessProperty space type space identifier "{ get; set; }" "$END$"
accessProperty  ::= "public"=p | private=_p | protected=P
lazyPrivateSpec ::= "private "=_ | ""

// Plain types
arraySpec  ::= "[]"=s | ""
type       ::= primType | compType | suggType
primType   ::= string=s | byte=b | double=d | int=i

// Complex types
genericArg  ::= "<" primType ">"
scgTypes    ::= IList=l | IEnumerable="~"
generic2Arg ::= "<" primType ">"
scg2Types   ::= SortedList=sl | IDictionary=di
SCG         ::= "System.Collections.Generic"
compType    ::= SCG "." scgTypes genericArg | SCG "." scg2Types generic2Arg

scope "InCSharpTypeMember" {
  start    ::=  method | property | field | other
  method ::= (private=_ | protected=pr | "public") space ("static "=M | ""=m) (type | "void") space identifier "(" cursor ") { $END$ }"
  field ::= ("private"=f | "private readonly"=F) space type space identifier ";"

  other ::= "Verifiers.Verify(" cursor ")"=verify
  // Test: pType_ -> public $type$ $END$

  // Methods:
  // Test: m -> public void $name$($END$) {}
  // Test: M -> public static void $name$($END$) {}
  // Test: prmName -> protected void Name($END$) {}
  // Test: _M -> private static void $name$($END$) {}
  // Test: MiTest -> public static int Test($END$) {}
  // Test: _M~i -> private static System.Collections.Generic.IEnumerable<int> $name$($END$) {}
  // Test: _M~sEnu -> private static System.Collections.Generic.IEnumerable<string> Enu($END$) {}
  // Test: MMain,itest -> public static void Main(int test) {}
  // Test: MMain,oitest -> public static void Main(out int test) {}
  // Test: MMain`i,i,itest -> public static void Main<int,int>(int test) {}
  // Test: m~dHello,detest,sbi -> public IEnumerable<double> Hello(decimal test, StringBuiler i){}

  // Auto-properties
  // Test: pType,Name -> public $type$ Name { get; set; }
}

scope "InCSharpTypeAndNamespace" {
  start ::= class | interface | enum
  class ::= ("internal class"=c | "public class"=pc | "private class"=_pc) space classBody
  interface ::= "internal interface"=i space classBody
  classBody ::= identifier "{" cursor "}"
}
