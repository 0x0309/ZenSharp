//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0164, 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen
{
  internal abstract class ClrRegexParserGenerated : JetBrains.ReSharper.Psi.Parsing.GeneratedParserBase<JetBrains.ReSharper.Psi.Parsing.ILexer>
  {
    protected ParsingContext myCurrentContext = ParsingContext.UNDEFINED;
    protected enum ParsingContext : short
    {
      UNDEFINED
    }
    protected class ParsingContextAttribute : System.Attribute
    {
      private ParsingContext myParsingContext;
      public ParsingContextAttribute(ParsingContext context)
      {
        myParsingContext = context;
      }
      public ParsingContext ParsingContext
      {
        get { return myParsingContext; }
      }
    }
    protected bool IsInFollow(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType)
    {
      switch (myCurrentContext)
      {
        case ParsingContext.UNDEFINED:
          return false;
        default:
          throw new System.InvalidOperationException("Unknown context");
      }
    }
    protected virtual TreeElement Match(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType)
    {
      if (myLexer.TokenType != tokenType)
      {
        var tokenRepr = tokenType.TokenRepresentation;
        if (string.IsNullOrEmpty(tokenRepr))
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ParserMessages.GetExpectedMessage(tokenType.ToString()));
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ParserMessages.GetExpectedMessage(tokenRepr));
      }
      return CreateToken();
    }
    protected void Skip(CompositeElement parent)
    {
      parent.AppendNewChild(CreateToken());
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrConcatenationRegularExpression()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_CONCATENATION_REGULAR_EXPRESSION);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_0[tokenType])
        {
          tempParsingResult = ParseClrQuantifiableRegularExpression();
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BORDER
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage0());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrConcatenationRegularExpression(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrConcatenationRegularExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BORDER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrQuantifiableRegularExpression()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_QUANTIFIABLE_REGULAR_EXPRESSION);
        tempParsingResult = ParseClrRegexQuantifierOwner();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_1[tokenType])
        {
          tempParsingResult = ParseClrRegexQuantifier();
          result.AppendNewChild(tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_2[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage1());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrQuantifiableRegularExpression(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrQuantifiableRegularExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_2[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexAlternationGroup()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_ALTERNATION_GROUP);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
          result.AppendNewChild(tempParsingResult);
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL);
          result.AppendNewChild(tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          tempParsingResult = ParseClrRegexName();
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType != null && TokenBitsets.TokenBitset_3[tokenType])
          {
            tempParsingResult = ParseClrRegularExpression();
            result.AppendNewChild(tempParsingResult);
          }
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
        {
          tempParsingResult = ParseClrRegexNumber();
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType != null && TokenBitsets.TokenBitset_3[tokenType])
          {
            tempParsingResult = ParseClrRegularExpression();
            result.AppendNewChild(tempParsingResult);
          }
        }
        else if (tokenType != null && TokenBitsets.TokenBitset_3[tokenType])
        {
          tempParsingResult = ParseClrRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          tempParsingResult = ParseClrRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrConcatenationRegularExpression();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE);
          result.AppendNewChild(tempParsingResult);
          tempParsingResult = ParseClrConcatenationRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage2());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexAlternationGroup(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexAlternationGroup (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexAnchor()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_A
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_G)
        {
          tempParsingResult = ParseClrRegexStartAnchor();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOLLAR
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_Z
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_Z)
        {
          tempParsingResult = ParseClrRegexEndAnchor();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_B
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_B)
        {
          tempParsingResult = ParseClrRegexBorderAnchor();
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage3());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage4());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult == null)
        {
          e.ParsingResult = tempParsingResult;
        }
        else
        {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = HandleErrorInClrRegexAnchor((CompositeElement) tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement HandleErrorInClrRegexAnchor (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexBorderAnchor()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_BORDER_ANCHOR);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_B)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_B);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_B)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_B);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage5());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage6());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexBorderAnchor(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexBorderAnchor (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexBracketCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_BRACKET_CHARACTER);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage7());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexBracketCharacter(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexBracketCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_5[tokenType])
        {
          tempParsingResult = ParseClrRegexSymbolCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.INVALID)
        {
          tempParsingResult = ParseClrRegexInvalidCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE)
        {
          tempParsingResult = ParseClrRegexEscapeCharacter();
        }
        else if (tokenType != null && TokenBitsets.TokenBitset_6[tokenType])
        {
          tempParsingResult = ParseClrRegexRegularCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET)
        {
          tempParsingResult = ParseClrRegexBracketCharacter();
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage8());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage9());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult == null)
        {
          e.ParsingResult = tempParsingResult;
        }
        else
        {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = HandleErrorInClrRegexCharacter((CompositeElement) tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement HandleErrorInClrRegexCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexEndAnchor()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_END_ANCHOR);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOLLAR)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOLLAR);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_Z)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_Z);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_Z)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_Z);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage10());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage11());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexEndAnchor(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexEndAnchor (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexEscapeCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_ESCAPE_CHARACTER);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage12());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexEscapeCharacter(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexEscapeCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexGroup();
    protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexGroupInternal()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = ParseClrRegexSimpleGroup();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = ParseClrRegexNamedGroup();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = ParseClrRegexPrefixGroup();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = ParseClrRegexOptionGroup();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = ParseClrRegexAlternationGroup();
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage13());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult == null)
        {
          e.ParsingResult = tempParsingResult;
        }
        throw;
      }
      return tempParsingResult;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexGroupName()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_GROUP_NAME);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT);
          result.AppendNewChild(tempParsingResult);
          ParseClrRegexGroupNameValue(result);
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE);
          result.AppendNewChild(tempParsingResult);
          ParseClrRegexGroupNameValue(result);
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage14());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_7[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage15());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexGroupName(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexGroupName (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_7[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual void ParseClrRegexGroupNameValue(CompositeElement result)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          tempParsingResult = ParseClrRegexName();
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
          {
            tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH);
            result.AppendNewChild(tempParsingResult);
            tempParsingResult = ParseClrRegexName();
            result.AppendNewChild(tempParsingResult);
          }
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH);
          result.AppendNewChild(tempParsingResult);
          tempParsingResult = ParseClrRegexName();
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage16());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage17());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          HandleErrorInClrRegexGroupNameValue(result, e);
        }
        else
        {
          throw;
        }
      }
    }
    protected virtual CompositeElement HandleErrorInClrRegexGroupNameValue (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexGroupPrefix()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_GROUP_PREFIX);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT);
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
          {
            tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL);
            result.AppendNewChild(tempParsingResult);
          }
          else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
          {
            tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION);
            result.AppendNewChild(tempParsingResult);
          }
          else
          {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage18());
          }
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage19());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_7[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage20());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexGroupPrefix(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexGroupPrefix (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_7[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexInvalidCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_INVALID_CHARACTER);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.INVALID);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage21());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexInvalidCharacter(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexInvalidCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexName()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME);
        ParseLetter(result);
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_8[tokenType])
        {
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
          {
            ParseLetter(result);
          }
          else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
          {
            ParseDigit(result);
          }
          else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNDERLINE)
          {
            tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNDERLINE);
            result.AppendNewChild(tempParsingResult);
          }
          else
          {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage22());
          }
          tokenType = myLexer.TokenType;
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexNamedBackreference()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAMED_BACKREFERENCE);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NAMED_BACKREFERENCE);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT);
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
          {
            tempParsingResult = ParseClrRegexName();
            result.AppendNewChild(tempParsingResult);
          }
          else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
          {
            tempParsingResult = ParseClrRegexNumber();
            result.AppendNewChild(tempParsingResult);
          }
          else
          {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage23());
          }
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE);
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
          {
            tempParsingResult = ParseClrRegexName();
            result.AppendNewChild(tempParsingResult);
          }
          else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
          {
            tempParsingResult = ParseClrRegexNumber();
            result.AppendNewChild(tempParsingResult);
          }
          else
          {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage24());
          }
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage25());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage26());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexNamedBackreference(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexNamedBackreference (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexNamedBlock()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAMED_BLOCK);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNICODE_NAMED_BLOCK)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNICODE_NAMED_BLOCK);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NONUNICODE_NAMED_BLOCK)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NONUNICODE_NAMED_BLOCK);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage27());
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACE);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegexName();
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACE);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage28());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexNamedBlock(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexNamedBlock (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexNamedGroup()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAMED_GROUP);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegexGroupName();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_3[tokenType])
        {
          tempParsingResult = ParseClrRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage29());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexNamedGroup(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexNamedGroup (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexNestedSet()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NESTED_SET);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegexSet();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage30());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexNestedSet(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexNestedSet (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexNumber()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
        {
          do
          {
            ParseDigit(result);
            tokenType = myLexer.TokenType;
          }
          while (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage31());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexNumericQuantifier()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMERIC_QUANTIFIER);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACE);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegexNumber();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COMMA)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COMMA);
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
          {
            tempParsingResult = ParseClrRegexNumber();
            result.AppendNewChild(tempParsingResult);
          }
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACE);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_10[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage32());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexNumericQuantifier(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexNumericQuantifier (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_10[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexOptionGroup()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_OPTION_GROUP);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION);
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH);
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
          if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
          {
            do
            {
              tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION);
              result.AppendNewChild(tempParsingResult);
              tokenType = myLexer.TokenType;
            }
            while (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION);
          }
          else
          {
            if (result.firstChild == null) result = null;
            throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage33());
          }
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON);
          result.AppendNewChild(tempParsingResult);
          tempParsingResult = ParseClrRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage34());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexOptionGroup(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexOptionGroup (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexPrefixGroup()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_PREFIX_GROUP);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegexGroupPrefix();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_3[tokenType])
        {
          tempParsingResult = ParseClrRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage35());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexPrefixGroup(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexPrefixGroup (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexQuantifier();
    protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexQuantifierInternal()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_QUANTIFIER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACE)
        {
          tempParsingResult = ParseClrRegexNumericQuantifier();
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage36());
        }
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
          result.AppendNewChild(tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_2[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage37());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexQuantifier(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexQuantifier (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_2[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexQuantifierOwner()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = ParseClrRegexGroup();
        }
        else if (tokenType != null && TokenBitsets.TokenBitset_11[tokenType])
        {
          tempParsingResult = ParseClrRegexCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACKET)
        {
          tempParsingResult = ParseClrRegexSet();
        }
        else if (tokenType != null && TokenBitsets.TokenBitset_12[tokenType])
        {
          tempParsingResult = ParseClrRegexAnchor();
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage38());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage39());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult == null)
        {
          e.ParsingResult = tempParsingResult;
        }
        else
        {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = HandleErrorInClrRegexQuantifierOwner((CompositeElement) tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement HandleErrorInClrRegexQuantifierOwner (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexRegularCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_REGULAR_CHARACTER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CLASS)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CLASS);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BACKREFERENCE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BACKREFERENCE);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NAMED_BACKREFERENCE)
        {
          tempParsingResult = ParseClrRegexNamedBackreference();
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NONUNICODE_NAMED_BLOCK
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNICODE_NAMED_BLOCK)
        {
          tempParsingResult = ParseClrRegexNamedBlock();
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage40());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage41());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexRegularCharacter(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexRegularCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSet()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SET);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACKET);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT);
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = ParseClrRegexSetBody();
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage42());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexSet(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSet (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetBody()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SET_BODY);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET);
          result.AppendNewChild(tempParsingResult);
        }
        tokenType = myLexer.TokenType;
        while(tokenType != null && TokenBitsets.TokenBitset_13[tokenType])
        {
          tempParsingResult = ParseClrRegexSetBodyItem();
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET)  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage43());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexSetBody(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSetBody (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACKET)  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetBodyCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_5[tokenType])
        {
          tempParsingResult = ParseClrRegexSymbolCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.INVALID)
        {
          tempParsingResult = ParseClrRegexInvalidCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE)
        {
          tempParsingResult = ParseClrRegexEscapeCharacter();
        }
        else if (tokenType != null && TokenBitsets.TokenBitset_6[tokenType])
        {
          tempParsingResult = ParseClrRegexRegularCharacter();
        }
        else if (tokenType != null && TokenBitsets.TokenBitset_14[tokenType])
        {
          tempParsingResult = ParseClrRegexSetCharacter();
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage44());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage45());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult == null)
        {
          e.ParsingResult = tempParsingResult;
        }
        else
        {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = HandleErrorInClrRegexSetBodyCharacter((CompositeElement) tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSetBodyCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetBodyItem();
    protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetBodyItemInternal()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_13[tokenType])
        {
          tempParsingResult = ParseClrRegexSetBodyCharacter();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          tempParsingResult = ParseClrRegexSetRange();
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
        {
          tempParsingResult = ParseClrRegexNestedSet();
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage46());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage47());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult == null)
        {
          e.ParsingResult = tempParsingResult;
        }
        else
        {
          tempParsingResult = e.ParsingResult;
        }
        if (tempParsingResult == null) throw e;
        tempParsingResult = HandleErrorInClrRegexSetBodyItem((CompositeElement) tempParsingResult, e);
      }
      return tempParsingResult;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSetBodyItem (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SET_CHARACTER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_B)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_LOWER_B);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOLLAR)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOLLAR);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DOT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACKET)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACKET);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage48());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage49());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexSetCharacter(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSetCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetRange()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SET_RANGE);
        tempParsingResult = ParseClrRegexSetRangeItem();
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegexSetRangeItem();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage50());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexSetRange(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSetRange (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_9[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSetRangeItem()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SET_RANGE_ITEM);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          ParseLetter(result);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
        {
          ParseDigit(result);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage51());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSimpleGroup()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SIMPLE_GROUP);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null && TokenBitsets.TokenBitset_3[tokenType])
        {
          tempParsingResult = ParseClrRegularExpression();
          result.AppendNewChild(tempParsingResult);
        }
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage52());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexSimpleGroup(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSimpleGroup (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexStartAnchor()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_START_ANCHOR);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.CAROT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_A)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_A);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_G)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.ESCAPE_UPPER_G);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage53());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage54());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexStartAnchor(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexStartAnchor (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegexSymbolCharacter()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_SYMBOL_CHARACTER);
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT)
        {
          ParseDigit(result);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          ParseLetter(result);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.WHITESPACE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.WHITESPACE);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.OTHER)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.OTHER);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COMMA)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COMMA);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.AMPER)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.AMPER);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GRAVEACCENT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GRAVEACCENT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNDERLINE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.UNDERLINE);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LBRACE);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RBRACE);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          if (result.firstChild == null) result = null;
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage55());
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage56());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegexSymbolCharacter(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegexSymbolCharacter (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !( TokenBitsets.TokenBitset_4[tokenType])  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegularExpression()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION);
        tempParsingResult = ParseClrConcatenationRegularExpression();
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        while(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE);
          result.AppendNewChild(tempParsingResult);
          tempParsingResult = ParseClrConcatenationRegularExpression();
          result.AppendNewChild(tempParsingResult);
          tokenType = myLexer.TokenType;
        }
        tokenType = myLexer.TokenType;
        if (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BORDER
            || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)  )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage57());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegularExpression(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegularExpression (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null  && !(tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BORDER
          || tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)  && !IsInFollow(tokenType)  )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseClrRegularExpressionFile()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION_FILE);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BORDER);
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = ParseClrRegularExpression();
        result.AppendNewChild(tempParsingResult);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.BORDER);
        result.AppendNewChild(tempParsingResult);
        tokenType = myLexer.TokenType;
        if (tokenType != null )
        {
          throw new JetBrains.ReSharper.Psi.Parsing.FollowsFailure(ErrorMessages.GetErrorMessage58());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        if (result != null)
        {
          HandleErrorInClrRegularExpressionFile(result, e);
        }
        else
        {
          throw;
        }
      }
      return result;
    }
    protected virtual CompositeElement HandleErrorInClrRegularExpressionFile (CompositeElement result, JetBrains.ReSharper.Psi.Parsing.SyntaxError error)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement errorElement;
      if (result is JetBrains.ReSharper.Psi.Tree.IErrorElement)
      {
        errorElement = result;
      }
      else
      {
        errorElement = TreeElementFactory.CreateErrorElement(error.Message);
        result.AppendNewChild(errorElement);
      }
      tokenType = myLexer.TokenType;
      while (tokenType != null )
      {
        Skip(errorElement);
        tokenType = myLexer.TokenType;
      }
      return result;
    }
    public virtual void ParseDigit(CompositeElement result)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DIGIT);
        result.AppendNewChild(tempParsingResult);
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        throw;
      }
    }
    public virtual void ParseLetter(CompositeElement result)
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      TreeElement tempParsingResult = null; 
      try
      {
        tokenType = myLexer.TokenType;
        if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER);
          result.AppendNewChild(tempParsingResult);
        }
        else if (tokenType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          tempParsingResult = Match(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION);
          result.AppendNewChild(tempParsingResult);
        }
        else
        {
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(ErrorMessages.GetErrorMessage59());
        }
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        throw;
      }
    }
  }
}
