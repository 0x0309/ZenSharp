//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree
{
  public abstract partial class TreeNodeVisitor
  {
    public virtual void VisitNode([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.Tree.ITreeNode node)
    {
    }
    public virtual void VisitClrConcatenationRegularExpression([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrConcatenationRegularExpression clrConcatenationRegularExpressionParam)
    {
      VisitNode(clrConcatenationRegularExpressionParam);
    }
    public virtual void VisitClrQuantifiableRegularExpression([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrQuantifiableRegularExpression clrQuantifiableRegularExpressionParam)
    {
      VisitNode(clrQuantifiableRegularExpressionParam);
    }
    public virtual void VisitClrRegexAlternationGroup([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexAlternationGroup clrRegexAlternationGroupParam)
    {
      VisitClrRegexGroup(clrRegexAlternationGroupParam);
    }
    public virtual void VisitClrRegexAnchor([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexAnchor clrRegexAnchorParam)
    {
      VisitClrRegexQuantifierOwner(clrRegexAnchorParam);
    }
    public virtual void VisitClrRegexBorderAnchor([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexBorderAnchor clrRegexBorderAnchorParam)
    {
      VisitClrRegexAnchor(clrRegexBorderAnchorParam);
    }
    public virtual void VisitClrRegexBracketCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexBracketCharacter clrRegexBracketCharacterParam)
    {
      VisitClrRegexCharacter(clrRegexBracketCharacterParam);
    }
    [System.Obsolete("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
    public virtual void VisitClrRegexCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexCharacter clrRegexCharacterParam)
    {
      VisitClrRegexQuantifierOwner(clrRegexCharacterParam);
    }
    public virtual void VisitClrRegexEndAnchor([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexEndAnchor clrRegexEndAnchorParam)
    {
      VisitClrRegexAnchor(clrRegexEndAnchorParam);
    }
    public virtual void VisitClrRegexEscapeCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexEscapeCharacter clrRegexEscapeCharacterParam)
    {
      VisitNode(clrRegexEscapeCharacterParam);
    }
    public virtual void VisitClrRegexGroup([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroup clrRegexGroupParam)
    {
      VisitClrRegexQuantifierOwner(clrRegexGroupParam);
    }
    public virtual void VisitClrRegexGroupName([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroupName clrRegexGroupNameParam)
    {
      VisitNode(clrRegexGroupNameParam);
    }
    public virtual void VisitClrRegexGroupPrefix([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroupPrefix clrRegexGroupPrefixParam)
    {
      VisitNode(clrRegexGroupPrefixParam);
    }
    public virtual void VisitClrRegexInvalidCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexInvalidCharacter clrRegexInvalidCharacterParam)
    {
      VisitNode(clrRegexInvalidCharacterParam);
    }
    public virtual void VisitClrRegexName([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName clrRegexNameParam)
    {
      VisitNode(clrRegexNameParam);
    }
    public virtual void VisitClrRegexNamedBackreference([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedBackreference clrRegexNamedBackreferenceParam)
    {
      VisitNode(clrRegexNamedBackreferenceParam);
    }
    public virtual void VisitClrRegexNamedBlock([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedBlock clrRegexNamedBlockParam)
    {
      VisitNode(clrRegexNamedBlockParam);
    }
    public virtual void VisitClrRegexNamedGroup([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedGroup clrRegexNamedGroupParam)
    {
      VisitClrRegexGroup(clrRegexNamedGroupParam);
    }
    public virtual void VisitClrRegexNestedSet([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNestedSet clrRegexNestedSetParam)
    {
      VisitClrRegexSetBodyItem(clrRegexNestedSetParam);
    }
    public virtual void VisitClrRegexNumber([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber clrRegexNumberParam)
    {
      VisitNode(clrRegexNumberParam);
    }
    public virtual void VisitClrRegexNumericQuantifier([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier clrRegexNumericQuantifierParam)
    {
      VisitNode(clrRegexNumericQuantifierParam);
    }
    public virtual void VisitClrRegexOptionGroup([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexOptionGroup clrRegexOptionGroupParam)
    {
      VisitClrRegexGroup(clrRegexOptionGroupParam);
    }
    public virtual void VisitClrRegexPrefixGroup([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexPrefixGroup clrRegexPrefixGroupParam)
    {
      VisitClrRegexGroup(clrRegexPrefixGroupParam);
    }
    public virtual void VisitClrRegexQuantifier([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexQuantifier clrRegexQuantifierParam)
    {
      VisitNode(clrRegexQuantifierParam);
    }
    public virtual void VisitClrRegexQuantifierOwner([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexQuantifierOwner clrRegexQuantifierOwnerParam)
    {
      VisitNode(clrRegexQuantifierOwnerParam);
    }
    public virtual void VisitClrRegexRegularCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexRegularCharacter clrRegexRegularCharacterParam)
    {
      VisitNode(clrRegexRegularCharacterParam);
    }
    public virtual void VisitClrRegexSet([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSet clrRegexSetParam)
    {
      VisitClrRegexQuantifierOwner(clrRegexSetParam);
    }
    public virtual void VisitClrRegexSetBody([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetBody clrRegexSetBodyParam)
    {
      VisitNode(clrRegexSetBodyParam);
    }
    [System.Obsolete("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexSetBodyCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
    public virtual void VisitClrRegexSetBodyCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetBodyCharacter clrRegexSetBodyCharacterParam)
    {
      VisitClrRegexSetBodyItem(clrRegexSetBodyCharacterParam);
    }
    public virtual void VisitClrRegexSetBodyItem([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetBodyItem clrRegexSetBodyItemParam)
    {
      VisitNode(clrRegexSetBodyItemParam);
    }
    public virtual void VisitClrRegexSetCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetCharacter clrRegexSetCharacterParam)
    {
      VisitClrRegexSetBodyCharacter(clrRegexSetCharacterParam);
    }
    public virtual void VisitClrRegexSetRange([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetRange clrRegexSetRangeParam)
    {
      VisitClrRegexSetBodyItem(clrRegexSetRangeParam);
    }
    public virtual void VisitClrRegexSetRangeItem([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetRangeItem clrRegexSetRangeItemParam)
    {
      VisitNode(clrRegexSetRangeItemParam);
    }
    public virtual void VisitClrRegexSimpleGroup([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSimpleGroup clrRegexSimpleGroupParam)
    {
      VisitClrRegexGroup(clrRegexSimpleGroupParam);
    }
    public virtual void VisitClrRegexStartAnchor([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexStartAnchor clrRegexStartAnchorParam)
    {
      VisitClrRegexAnchor(clrRegexStartAnchorParam);
    }
    public virtual void VisitClrRegexSymbolCharacter([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSymbolCharacter clrRegexSymbolCharacterParam)
    {
      VisitNode(clrRegexSymbolCharacterParam);
    }
    public virtual void VisitClrRegularExpression([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression clrRegularExpressionParam)
    {
      VisitNode(clrRegularExpressionParam);
    }
    public virtual void VisitClrRegularExpressionFile([JetBrains.Annotations.NotNull] JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpressionFile clrRegularExpressionFileParam)
    {
      VisitNode(clrRegularExpressionFileParam);
    }
  }
}
