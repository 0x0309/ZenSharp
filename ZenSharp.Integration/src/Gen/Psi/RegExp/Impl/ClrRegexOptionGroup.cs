//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree
{
  internal partial class ClrRegexOptionGroup : JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement, JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexOptionGroup
  {
    public const short REGEXP_LPARENTH = ChildRole.REGEXP_LPARENTH;
    public const short REGEXP_QUESTION = ChildRole.REGEXP_QUESTION;
    public const short REGEXP_OPTION = ChildRole.REGEXP_OPTION;
    public const short REGEXP_DASH = ChildRole.REGEXP_DASH;
    public const short REGEXP_NONE = ChildRole.REGEXP_NONE;
    public const short REGEXP_EXPRESSION = ChildRole.REGEXP_EXPRESSION;
    public const short REGEXP_RPARENTH = ChildRole.REGEXP_RPARENTH;
    internal ClrRegexOptionGroup() : base() { }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType
    {
      get { return JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_OPTION_GROUP; }
    }
    public  void Accept(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor visitor)
    {
      visitor.VisitClrRegexOptionGroup(this);
    }
    public  void Accept<TContext>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext> visitor, TContext context)
    {
      visitor.VisitClrRegexOptionGroup(this, context);
    }
    public  TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context)
    {
      return visitor.VisitClrRegexOptionGroup(this, context);
    }
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child)
    {
      switch (child.NodeType.Index)
      {
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH_NODE_TYPE_INDEX:
        return REGEXP_LPARENTH;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION_NODE_TYPE_INDEX:
        return REGEXP_QUESTION;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION_NODE_TYPE_INDEX:
        return REGEXP_OPTION;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH_NODE_TYPE_INDEX:
        return REGEXP_DASH;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON_NODE_TYPE_INDEX:
        return REGEXP_NONE;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION_NODE_TYPE_INDEX:
        return REGEXP_EXPRESSION;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH_NODE_TYPE_INDEX:
        return REGEXP_RPARENTH;
      }
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Colon
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_NONE); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Dash
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_DASH); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode LParenth
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_LPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Options
    {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.Tree.ITokenNode>(REGEXP_OPTION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> OptionsEnumerable
    {
      get { return AsChildrenEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode>(REGEXP_OPTION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode QuestionSign
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_QUESTION); }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression RegularExpression
    {
      get { return (JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression) FindChildByRole(REGEXP_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode RParenth
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_RPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression SetRegularExpression(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression param)
    {
      using (JetBrains.ReSharper.Resources.Shell.WriteLockCookie.Create(this.IsPhysical()))
      {
        JetBrains.ReSharper.Psi.Tree.ITreeNode current = null, next = GetNextFilteredChild(current);
        JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression result = null;
        next = GetNextFilteredChild(current);
        if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
        {
          current = next;
        }
        else
        {
          return result;
        }
        next = GetNextFilteredChild(current);
        if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          current = next;
        }
        else
        {
          return result;
        }
        while (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
        {
          next = GetNextFilteredChild(current);
          if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
          {
            current = next;
          }
          else
          {
            return result;
          }
        }
        next = GetNextFilteredChild(current);
        if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
        {
          next = GetNextFilteredChild(current);
          if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.DASH)
          {
            current = next;
          }
          else
          {
            return result;
          }
          if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
          {
            do
            {
              next = GetNextFilteredChild(current);
              if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION)
              {
                current = next;
              }
              else
              {
                return result;
              }
            }
            while (
              next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LETTER_OPTION
            );
          }
        }
        next = GetNextFilteredChild(current);
        if (next == null)
        {
          current = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, TreeElementFactory.CreateErrorElement(string.Empty));
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON)
        {
          if (param != null)
          {
            current = next;
          }
          else
          {
            current = GetNextFilteredChild(next);
            JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
          }
        }
        else
        {
          return result;
        }
        next = GetNextFilteredChild(current);
        if (next == null)
        {
          if (param == null) return null;
          current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
        {
          if (param != null)
          {
            current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
          }
          else
          {
            current = GetNextFilteredChild(next);
            JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
          }
        }
        else
        {
          if (param == null) return null;
          result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
          current = next;
        }
        return result;
      }
    }
    public override string ToString()
    {
      return "IClrRegexOptionGroup";
    }
  }
}
