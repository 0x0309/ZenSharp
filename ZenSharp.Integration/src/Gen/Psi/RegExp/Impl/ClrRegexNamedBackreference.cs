//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree
{
  internal partial class ClrRegexNamedBackreference : JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement, JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedBackreference
  {
    public const short REGEXP_LT = ChildRole.REGEXP_LT;
    public const short REGEXP_NAME = ChildRole.REGEXP_NAME;
    public const short REGEXP_GT = ChildRole.REGEXP_GT;
    internal ClrRegexNamedBackreference() : base() { }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType
    {
      get { return JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAMED_BACKREFERENCE; }
    }
    public  void Accept(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor visitor)
    {
      visitor.VisitClrRegexNamedBackreference(this);
    }
    public  void Accept<TContext>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext> visitor, TContext context)
    {
      visitor.VisitClrRegexNamedBackreference(this, context);
    }
    public  TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context)
    {
      return visitor.VisitClrRegexNamedBackreference(this, context);
    }
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child)
    {
      switch (child.NodeType.Index)
      {
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT_NODE_TYPE_INDEX:
        return REGEXP_LT;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME_NODE_TYPE_INDEX:
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER_NODE_TYPE_INDEX:
        return REGEXP_NAME;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT_NODE_TYPE_INDEX:
        return REGEXP_GT;
      }
      JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement current = GetNextFilteredChild(null);
      if (current == null) return 0;
      if (child.parent != this) return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NAMED_BACKREFERENCE)
      {
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          if (current == child) return REGEXP_LT;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
          {
            if (current == child) return REGEXP_NAME;
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
        else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
          {
            if (current == child) return REGEXP_NAME;
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
        else
        {
          return 0;
        }
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)
        {
          if (current == child) return REGEXP_GT;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
          if (current == child) return REGEXP_LT;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
          {
            if (current == child) return REGEXP_NAME;
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
        else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
          {
            if (current == child) return REGEXP_NAME;
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
        else
        {
          return 0;
        }
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
          if (current == child) return REGEXP_GT;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else
      {
        return 0;
      }
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Gt
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_GT); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Lt
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_LT); }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName Name
    {
      get { return (JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName) FindChildByRole(REGEXP_NAME); }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber NAME
    {
      get { return (JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber) FindChildByRole(REGEXP_NAME); }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName SetName(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName param)
    {
      using (JetBrains.ReSharper.Resources.Shell.WriteLockCookie.Create(this.IsPhysical()))
      {
        JetBrains.ReSharper.Psi.Tree.ITreeNode current = null, next = GetNextFilteredChild(current);
        JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName result = null;
        next = GetNextFilteredChild(current);
        if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NAMED_BACKREFERENCE)
        {
          current = next;
        }
        else
        {
          return result;
        }
        next = GetNextFilteredChild(current);
        if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          next = GetNextFilteredChild(current);
          if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
          {
            current = next;
          }
          else
          {
            return result;
          }
          next = GetNextFilteredChild(current);
          if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
          {
            next = GetNextFilteredChild(current);
            if (next == null)
            {
              if (param == null) return null;
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
            }
            else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
            {
              if (param != null)
              {
                current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
              }
              else
              {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            }
            else
            {
              if (param == null) return null;
              result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
              current = next;
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
          {
          }
          else
          {
            return null;
          }
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
        }
        else
        {
          return null;
        }
        return result;
      }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber SetNAME(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber param)
    {
      using (JetBrains.ReSharper.Resources.Shell.WriteLockCookie.Create(this.IsPhysical()))
      {
        JetBrains.ReSharper.Psi.Tree.ITreeNode current = null, next = GetNextFilteredChild(current);
        JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber result = null;
        next = GetNextFilteredChild(current);
        if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.NAMED_BACKREFERENCE)
        {
          current = next;
        }
        else
        {
          return result;
        }
        next = GetNextFilteredChild(current);
        if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          next = GetNextFilteredChild(current);
          if (next != null && next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
          {
            current = next;
          }
          else
          {
            return result;
          }
          next = GetNextFilteredChild(current);
          if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
          {
            next = GetNextFilteredChild(current);
            if (next == null)
            {
              if (param == null) return null;
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
            }
            else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
            {
              if (param != null)
              {
                current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
              }
              else
              {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            }
            else
            {
              if (param == null) return null;
              result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
              current = next;
            }
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
          {
          }
          else
          {
            return null;
          }
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.APOSTROPHE)
        {
        }
        else
        {
          return null;
        }
        return result;
      }
    }
    public override string ToString()
    {
      return "IClrRegexNamedBackreference";
    }
  }
}
