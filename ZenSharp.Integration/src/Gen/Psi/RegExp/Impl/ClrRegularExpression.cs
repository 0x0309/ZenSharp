//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree
{
  internal partial class ClrRegularExpression : JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement, JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression
  {
    public const short REGEXP_EXPRESSION = ChildRole.REGEXP_EXPRESSION;
    public const short REGEXP_PIPE = ChildRole.REGEXP_PIPE;
    internal ClrRegularExpression() : base() { }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType
    {
      get { return JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION; }
    }
    public  void Accept(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor visitor)
    {
      visitor.VisitClrRegularExpression(this);
    }
    public  void Accept<TContext>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext> visitor, TContext context)
    {
      visitor.VisitClrRegularExpression(this, context);
    }
    public  TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context)
    {
      return visitor.VisitClrRegularExpression(this, context);
    }
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child)
    {
      switch (child.NodeType.Index)
      {
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_CONCATENATION_REGULAR_EXPRESSION_NODE_TYPE_INDEX:
        return REGEXP_EXPRESSION;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE_NODE_TYPE_INDEX:
        return REGEXP_PIPE;
      }
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrConcatenationRegularExpression> ConcatenationRegularExpressions
    {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrConcatenationRegularExpression>(REGEXP_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrConcatenationRegularExpression> ConcatenationRegularExpressionsEnumerable
    {
      get { return AsChildrenEnumerable<JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrConcatenationRegularExpression>(REGEXP_EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Pipes
    {
      get { return FindListOfChildrenByRole<JetBrains.ReSharper.Psi.Tree.ITokenNode>(REGEXP_PIPE); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> PipesEnumerable
    {
      get { return AsChildrenEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode>(REGEXP_PIPE); }
    }
    public override string ToString()
    {
      return "IClrRegularExpression";
    }
  }
}
