//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree
{
  internal partial class ClrRegexQuantifier : JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement, JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexQuantifier
  {
    public const short REGEXP_STAR = ChildRole.REGEXP_STAR;
    public const short REGEXP_PLUS = ChildRole.REGEXP_PLUS;
    public const short REGEXP_QUESTION = ChildRole.REGEXP_QUESTION;
    public const short REGEXP_NUMERIC = ChildRole.REGEXP_NUMERIC;
    public const short REGEXP_NONE = ChildRole.REGEXP_NONE;
    internal ClrRegexQuantifier() : base() { }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType
    {
      get { return JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_QUANTIFIER; }
    }
    public  void Accept(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor visitor)
    {
      visitor.VisitClrRegexQuantifier(this);
    }
    public  void Accept<TContext>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext> visitor, TContext context)
    {
      visitor.VisitClrRegexQuantifier(this, context);
    }
    public  TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context)
    {
      return visitor.VisitClrRegexQuantifier(this, context);
    }
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child)
    {
      switch (child.NodeType.Index)
      {
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR_NODE_TYPE_INDEX:
        return REGEXP_STAR;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS_NODE_TYPE_INDEX:
        return REGEXP_PLUS;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMERIC_QUANTIFIER_NODE_TYPE_INDEX:
        return REGEXP_NUMERIC;
      }
      JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement current = GetNextFilteredChild(null);
      if (current == null) return 0;
      if (child.parent != this) return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
        {
          if (current == child) return REGEXP_STAR;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS)
        {
          if (current == child) return REGEXP_PLUS;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          if (current == child) return REGEXP_QUESTION;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMERIC_QUANTIFIER)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMERIC_QUANTIFIER)
        {
          if (current == child) return REGEXP_NUMERIC;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else
      {
        return 0;
      }
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          if (current == child) return REGEXP_NONE;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier Numeric
    {
      get { return (JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier) FindChildByRole(REGEXP_NUMERIC); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode OptionalQuestion
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_NONE); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Plus
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_PLUS); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Question
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_QUESTION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Star
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_STAR); }
    }
    public virtual JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier SetNumeric(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier param)
    {
      using (JetBrains.ReSharper.Resources.Shell.WriteLockCookie.Create(this.IsPhysical()))
      {
        JetBrains.ReSharper.Psi.Tree.ITreeNode current = null, next = GetNextFilteredChild(current);
        JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier result = null;
        next = GetNextFilteredChild(current);
        if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
        {
          next = GetNextFilteredChild(current);
          if (next == null)
          {
            if (param == null) return null;
            current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
          {
            if (param != null)
            {
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
            }
            else
            {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          }
          else
          {
            if (param == null) return null;
            result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
            current = next;
          }
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS)
        {
          next = GetNextFilteredChild(current);
          if (next == null)
          {
            if (param == null) return null;
            current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PLUS)
          {
            if (param != null)
            {
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
            }
            else
            {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          }
          else
          {
            if (param == null) return null;
            result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
            current = next;
          }
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          next = GetNextFilteredChild(current);
          if (next == null)
          {
            if (param == null) return null;
            current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
          {
            if (param != null)
            {
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
            }
            else
            {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          }
          else
          {
            if (param == null) return null;
            result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
            current = next;
          }
        }
        else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMERIC_QUANTIFIER)
        {
          next = GetNextFilteredChild(current);
          if (next == null)
          {
            if (param == null) return null;
            current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMERIC_QUANTIFIER)
          {
            if (param != null)
            {
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
            }
            else
            {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          }
          else
          {
            if (param == null) return null;
            result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
            current = next;
          }
        }
        else
        {
          next = GetNextFilteredChild(current);
          if (next == null)
          {
            if (param == null) return null;
            current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, param);
          }
          else if (next.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.STAR)
          {
            if (param != null)
            {
              current = result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, param);
            }
            else
            {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          }
          else
          {
            if (param == null) return null;
            result = JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, param);
            current = next;
          }
        }
        return result;
      }
    }
    public override string ToString()
    {
      return "IClrRegexQuantifier";
    }
  }
}
