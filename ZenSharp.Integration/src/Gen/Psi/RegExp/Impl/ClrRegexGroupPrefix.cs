//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree
{
  internal partial class ClrRegexGroupPrefix : JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement, JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroupPrefix
  {
    public const short REGEXP_COLON = ChildRole.REGEXP_COLON;
    public const short REGEXP_EQUAL = ChildRole.REGEXP_EQUAL;
    public const short REGEXP_EXCLAMATION = ChildRole.REGEXP_EXCLAMATION;
    public const short REGEXP_GT = ChildRole.REGEXP_GT;
    public const short REGEXP_LT = ChildRole.REGEXP_LT;
    public const short REGEXP_EQUAL2 = ChildRole.REGEXP_EQUAL2;
    public const short REGEXP_EXCLAMATION2 = ChildRole.REGEXP_EXCLAMATION2;
    internal ClrRegexGroupPrefix() : base() { }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType
    {
      get { return JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_GROUP_PREFIX; }
    }
    public  void Accept(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor visitor)
    {
      visitor.VisitClrRegexGroupPrefix(this);
    }
    public  void Accept<TContext>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext> visitor, TContext context)
    {
      visitor.VisitClrRegexGroupPrefix(this, context);
    }
    public  TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context)
    {
      return visitor.VisitClrRegexGroupPrefix(this, context);
    }
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child)
    {
      switch (child.NodeType.Index)
      {
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON_NODE_TYPE_INDEX:
        return REGEXP_COLON;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT_NODE_TYPE_INDEX:
        return REGEXP_GT;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT_NODE_TYPE_INDEX:
        return REGEXP_LT;
      }
      JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement current = GetNextFilteredChild(null);
      if (current == null) return 0;
      if (child.parent != this) return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.COLON)
        {
          if (current == child) return REGEXP_COLON;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
        {
          if (current == child) return REGEXP_EQUAL;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
        {
          if (current == child) return REGEXP_EXCLAMATION;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.GT)
        {
          if (current == child) return REGEXP_GT;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LT)
        {
          if (current == child) return REGEXP_LT;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
          {
            if (current == child) return REGEXP_EQUAL2;
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
        else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EXCLAMATION)
          {
            if (current == child) return REGEXP_EXCLAMATION2;
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode LongPrefix
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_EQUAL2); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Lt
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_LT); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Prefix
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_COLON); }
    }
    public override string ToString()
    {
      return "IClrRegexGroupPrefix";
    }
  }
}
