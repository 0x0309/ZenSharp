//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree;
using JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen;
namespace JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree
{
  internal partial class ClrRegexAlternationGroup : JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement, JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexAlternationGroup
  {
    public const short REGEXP_LPARENTH = ChildRole.REGEXP_LPARENTH;
    public const short REGEXP_QUESTION = ChildRole.REGEXP_QUESTION;
    public const short REGEXP_ALTLPARENTH = ChildRole.REGEXP_ALTLPARENTH;
    public const short REGEXP_QUESTION2 = ChildRole.REGEXP_QUESTION2;
    public const short REGEXP_EQUAL2 = ChildRole.REGEXP_EQUAL2;
    public const short REGEXP_ALTRPARENTH = ChildRole.REGEXP_ALTRPARENTH;
    public const short REGEXP_PIPE = ChildRole.REGEXP_PIPE;
    public const short REGEXP_RPARENTH = ChildRole.REGEXP_RPARENTH;
    internal ClrRegexAlternationGroup() : base() { }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType
    {
      get { return JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_ALTERNATION_GROUP; }
    }
    public  void Accept(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor visitor)
    {
      visitor.VisitClrRegexAlternationGroup(this);
    }
    public  void Accept<TContext>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext> visitor, TContext context)
    {
      visitor.VisitClrRegexAlternationGroup(this, context);
    }
    public  TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context)
    {
      return visitor.VisitClrRegexAlternationGroup(this, context);
    }
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child)
    {
      switch (child.NodeType.Index)
      {
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL_NODE_TYPE_INDEX:
        return REGEXP_EQUAL2;
        case JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE_NODE_TYPE_INDEX:
        return REGEXP_PIPE;
      }
      JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement current = GetNextFilteredChild(null);
      if (current == null) return 0;
      if (child.parent != this) return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
      {
        if (current == child) return REGEXP_LPARENTH;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
      {
        if (current == child) return REGEXP_QUESTION;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.LPARENTH)
      {
        if (current == child) return REGEXP_ALTLPARENTH;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.QUESTION)
        {
          if (current == child) return REGEXP_QUESTION2;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.EQUAL)
        {
          if (current == child) return REGEXP_EQUAL2;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NAME)
        {
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
          {
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGEX_NUMBER)
        {
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
        {
          if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
          {
            current = GetNextFilteredChild(current);
            if (current == null) return 0;
          }
          else return 0;
        }
      }
      else if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_REGULAR_EXPRESSION)
        {
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      else
      {
        return 0;
      }
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)
      {
        if (current == child) return REGEXP_ALTRPARENTH;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_CONCATENATION_REGULAR_EXPRESSION)
      {
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE)
      {
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.PIPE)
        {
          if (current == child) return REGEXP_PIPE;
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
        if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType.CLR_CONCATENATION_REGULAR_EXPRESSION)
        {
          current = GetNextFilteredChild(current);
          if (current == null) return 0;
        }
        else return 0;
      }
      if (current.NodeType == JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes.RPARENTH)
      {
        if (current == child) return REGEXP_RPARENTH;
        current = GetNextFilteredChild(current);
        if (current == null) return 0;
      }
      else return 0;
      return 0;
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode AltLParenth
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_ALTLPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode AltRParenth
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_ALTRPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode LongPrefix
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_EQUAL2); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode LParenth
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_LPARENTH); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Pipe
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_PIPE); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Prefix
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_QUESTION2); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode QuestionSign
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_QUESTION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode RParenth
    {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(REGEXP_RPARENTH); }
    }
    public override string ToString()
    {
      return "IClrRegexAlternationGroup";
    }
  }
}
