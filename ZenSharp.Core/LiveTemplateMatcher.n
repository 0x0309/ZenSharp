using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Github.Ulex.ZenSharp.Core
{
  public class LiveTemplateMatcher
  {
    private _tree : GenerateTree;

    public this(tree : GenerateTree) {
      _tree = tree;
    }

    [Record]
    public class MatchResult {
      public Success : bool;
      public Tail : string;
      public Rules : list[LeafRule];

      public this(mr : bool) {
        Success = mr;
      }
    }

    public Match (prefix : string, scopename : string) : MatchResult
    {
      def scope = _tree.FindScope(scopename);
      def scopeRules = _tree.GlobalRules + scope.Rules;

      // circle reference fix
      mutable tryMatchRuleVar;

      def tryMathcLeafRule(rule : LeafRule, acc : MatchResult) : MatchResult {
        match (rule){
          | x is LeafRule.NonTerminal => tryMatchRuleVar(_tree.FindRule(x.Value, scopeRules).Rules, acc);
          | lr => {
              def newtail = lr.Match(acc.Tail);
              match (newtail){
                | Some(x) => MatchResult(true, x, rule :: acc.Rules) // todo: wrong order
                | None => MatchResult(false)
              }
            }
        }
      }

      def tryMatchConcatRule (rules : list[LeafRule], acc : MatchResult) : MatchResult {
        match (rules) {
          | x :: xs => {
            def r = tryMathcLeafRule(x, acc);
            if (!acc.Success)
              r
            else
              tryMatchConcatRule(xs, r);
          }
          | _ => acc;
        }
      }

      def tryMatchRule (rules : list[ConcatRule], acc : MatchResult) : MatchResult {
        match (rules) {
          | x :: xs =>
            {
              def r = tryMatchConcatRule(x.Rules, acc);
              if (r.Success)
                r
              else
                tryMatchRule(xs, acc);
            };
          | _ => MatchResult(false, acc.Tail, acc.Rules);
        }
      }
      tryMatchRuleVar = tryMatchRule;

      tryMatchRule(_tree.FindStartRule(scope).Rules, MatchResult(true, prefix, []));
    }
  }
}
