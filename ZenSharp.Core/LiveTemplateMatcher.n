using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NLog;

namespace Github.Ulex.ZenSharp.Core
{
  public class LiveTemplateMatcher
  {
    private static _log = LogManager.GetCurrentClassLogger();
    
    private _tree : GenerateTree;

    public this(tree : GenerateTree) {
      _tree = tree;
    }

    [Record]
    public class MatchResult {
      public Success : bool { get; private set; }
      public Tail : string { get; private set };
      public Rules : list[LeafRule] { get; private set; }

      public this(mr : bool) {
        Success = mr;
      }

      public Expand(prefix : string) : string {
        def builder = System.Text.StringBuilder();
        foreach (r in ReMatchLeafs(prefix)){
          _ = builder.Append(r.Expand)
        }
        builder.ToString();
      }

      public ReMatchLeafs(prefix : string) : IEnumerable[LeafRule.LeafMatchResult]{
        def loop(tail, input, acc){
          match (tail){
            | x :: xs => {def matchResult = x.Match(input); loop(xs, matchResult.Crop(input), matchResult :: acc); }
            | _ => acc
          }
        }
        loop(Rules, prefix, []).Reverse();
      }
    }
    
    public class MatchResultWithSuggestion : MatchResult {
      public Suggestion : MatchResult;
      
      public this(success : bool, tail : string, rules : list[LeafRule], suggestion : MatchResult)
      {
        base(success, tail, rules);
        // choose best fit 
        if (suggestion == null || tail.Length < suggestion.Tail.Length){
          Suggestion = this;
        } else{
          Suggestion = suggestion;
        }
      }
      
      public this(mr : MatchResult, suggestion : MatchResult){
        this(mr.Success, mr.Tail, mr.Rules, suggestion);
      }
    }

    public Match (prefix : string, scopename : string) : MatchResultWithSuggestion
    {
      _log.Info("Trying to match [{0}] in scope {1}", prefix, scopename);
      def scope = _tree.GetScope(scopename);
      
      // scope rules can override global rules
      def scopeRules = scope.Rules + _tree.GlobalRules;

      // circle reference fix
      mutable tryMatchRuleVar;

      def tryMatchLeafRule(rule : LeafRule, acc){
        match (rule){
          | x is LeafRule.NonTerminal => tryMatchRuleVar(_tree.GetRule(x.Value, scopeRules).Rules, acc);
          | x is LeafRule.InsideRule => tryMatchRuleVar(x.Rules, acc);
          | lr => {
              def leafMatch = lr.Match(acc.Tail);
              MatchResultWithSuggestion(leafMatch.Success, leafMatch.Crop(acc.Tail), rule :: acc.Rules, acc.Suggestion)
            }
        }
      }

      def tryMatchConcatRule (rules : list[LeafRule], acc){
        match (rules) {
          | x :: xs => {
            def r = tryMatchLeafRule(x, acc);
            if (!r.Success)
              r
            else
              tryMatchConcatRule(xs, r);
          }
          | _ => acc;
        }
      }

      def tryMatchRule (rules : list[ConcatRule], acc){
        match (rules) {
          | x :: xs =>
            {
              def r = tryMatchConcatRule(x.Rules, acc);
              if (r.Success)
                r
              else
                tryMatchRule(xs, MatchResultWithSuggestion(acc, r.Suggestion));
            };
          | _ => MatchResultWithSuggestion(false, acc.Tail, acc.Rules, acc.Suggestion);
        }
      }
      tryMatchRuleVar = tryMatchRule;

      def iSuggest = MatchResult(false, prefix, []);
      def result = tryMatchRule(_tree.GetStartRule(scope).Rules, MatchResultWithSuggestion(true, prefix, [], iSuggest));
      _log.Info("Match result: {0}, tail: {1}, rules: {2}", result.Success, result.Tail, result.Rules);
      
      def suggestion = MatchResult(result.Suggestion.Success, result.Suggestion.Tail, result.Suggestion.Rules.Reverse());
      MatchResultWithSuggestion(result.Success, result.Tail, result.Rules.Reverse(), suggestion);
    }
  }
}
