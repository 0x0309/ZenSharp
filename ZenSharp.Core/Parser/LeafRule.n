using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Console;
using System.Collections.Generic;

namespace Github.Ulex.ZenSharp.Core
{
  public variant LeafRule
  {
    | String {
        Value : string;
        public override ToString() : string { $"String<$Value>"; }
        public override Match(input : string) : LeafMatchResult {
          LeafMatchResult(true, "", Value)
        }
      }
    | NonTerminal {
        Value : string;
        public override ToString() : string { $"NonTerminal<$Value>"; }
        public override Match(_ : string) : LeafMatchResult {
          throw NotImplementedException();
        }
      }
    | ExpandRule {
        Short : string;
        Expand : string;
        public override ToString() : string { $"ExpandRule<$Short,$Expand>"; }
        public override Match(input : string) : LeafMatchResult {
          if (input.StartsWith(Short))
            LeafMatchResult(true, Short, Expand);
          else
            LeafMatchResult(false);
        }
      }
    | Substitution {
        Name : string;
        Params: List[(string * string)];

        public override Match (input : string) : LeafMatchResult {
          def loop(pos){
            if (pos >= input.Length || !Identifier.IsIdentifier(input[pos]))
              pos;
            else
              loop(pos + 1);
          }

          def matchedCount = loop(0);
          if (matchedCount != 0){
            def matchString = input.Substring(0, matchedCount);
            LeafMatchResult(true, matchString, matchString);
          }
          else
            LeafMatchResult(false);
        }
    }

    [Record]
    public class LeafMatchResult {
      public Success : bool;
      public Short : string;
      public Expand : string;

      public this(success : bool){
        Success = success;
      }

      public Crop(input : string) : string {
        if (String.IsNullOrEmpty(input) || String.IsNullOrEmpty(Short))
          input;
        else
          input.Remove(0, Short.Length);
      }
    }

    public abstract Match (input : string) : LeafMatchResult;
  }
}
