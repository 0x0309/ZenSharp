using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Linq;
using System.Console;
using System.Collections.Generic;


namespace Github.Ulex.ZenSharp.Core
{
  public variant LeafRule
  {
    | String {
        Value : string;
        public override ToString() : string { $"String<$Value>"; }
        public override Match(_ : string) : LeafMatchResult {
          LeafMatchResult(true, "", Value, this)
        }
      }
    | NonTerminal {
        Value : string;
        public override ToString() : string { $"NonTerminal<$Value>"; }
        public override Match(_ : string) : LeafMatchResult {
          throw NotImplementedException();
        }
      }
    | InsideRule {
        public override ToString() : string { "InsideRule<>"; }
        public Rules : list[ConcatRule];
        public override Match(_ : string) : LeafMatchResult {
          throw NotImplementedException();
        }
      }
    | ExpandRule {
        Short : string;
        Expand : string;
        public override ToString() : string { $"ExpandRule<$Short,$Expand>"; }
        public override Match(input : string) : LeafMatchResult {
          if (input.StartsWith(Short) && input.Length > 0)
            LeafMatchResult(true, Short, Expand, this);
          else
            LeafMatchResult(false);
        }
      }
    | Substitution {
        Name : string;
        Params: list[(string * string)];

        public Item[s : string] : string{
          get{
            def v = Params.Find(k => k[0] == s);
            if (v.IsSome) v.Value[1] else null;
          }
        }
        private Prop[T](prop : string, default : T) : T {
          def val = this[prop];
          if (val != null) Convert.ChangeType(val, typeof(T), Globalization.CultureInfo.InvariantCulture) :> T;
          else default;
        }

        public Default : string {
          get{
            Prop("default", null);
          }
        }
        
        public Text : string {
          get{
            Prop("text", null);
          }
        }
        
        public CanBeNull : bool{
          get{
            !String.IsNullOrEmpty(Default);
          }
        }

        public override Match (input : string) : LeafMatchResult {
          def loop(pos){
            if (pos >= input.Length || !Identifier.IsIdentifier(input[pos]))
              pos;
            else
              loop(pos + 1);
          }

          def matchedCount = loop(0);
          def expandPattern = "$" + Name + "$";
          if (matchedCount != 0){
            def matchString = input.Substring(0, matchedCount);
            LeafMatchResult(true, matchString, if(Text == null) {matchString} else {Text}, this);
          }
          else if (CanBeNull){
              LeafMatchResult(true, "", if(Text == null) {expandPattern} else {Text}, this);
          }
          else
            LeafMatchResult(false);
        }
        
        public override ToString() : string {
          def kvpFormat(kvp: string * string) { string.Format("{0}={1}", kvp[0], kvp[1]); }
          string.Format("Substitution<{0}:{1}>", Name, string.Join(", ", Params.Map(kvpFormat)));
        }
    }

    [Record]
    public class LeafMatchResult {
      public Success : bool;
      public Short : string;
      public Expand : string;
      public This : LeafRule;

      public this(success : bool){
        Success = success;
      }

      public Crop(input : string) : string {
        if (String.IsNullOrEmpty(input) || String.IsNullOrEmpty(Short))
          input;
        else
          input.Remove(0, Short.Length);
      }
    }

    public abstract Match (input : string) : LeafMatchResult;
  }
}
