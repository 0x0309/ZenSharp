using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;

namespace Github.Ulex.ZenSharp.Core {
  [Record]
  public class GenerateTree{
    public GlobalRules : list[Rule];
    public Scopes : list[TreePart.Scope];

    public GetTemplates() : IEnumerable[LiveTemplate]
    {
        foreach (scope in Scopes)
          foreach (liveTemplate in GetTemplatesScope(scope))
            yield liveTemplate;
     }

     public GetScope(scopename : string) : TreePart.Scope
     {
        def scope = Scopes.Find(a => a.Name == scopename);
        if (!scope.IsSome)
          throw Exception($"scope with name $scopename not exist")
        else
          scope.Value;
     }
     
     public IsScopeExist(scopename : string) : bool
     {
        def scope = Scopes.Find(a => a.Name == scopename);
        scope.IsSome;
     }

     public GetRule(rulename : string, scopeRules : list[Rule]) : Rule
     {
       def rule = scopeRules.Find(r => r.Name == rulename);
       if (rule.IsSome)
         rule.Value
       else
         throw Exception($"Non-terminal rule '$rulename' is not exist");
     }

     public GetStartRule(scope : TreePart.Scope) : Rule
     {
        def startRule = scope.Rules.Find(a => a.Name == "start");
        if (!startRule.IsSome)
          throw Exception($"Start rule for scope $(scope.Name) not exist")
        else
          startRule.Value;
     }


      GetTemplatesScope(scope : TreePart.Scope) : IEnumerable[LiveTemplate]
     {
       def scopeRules = GlobalRules + scope.Rules;
       def startRule = GetStartRule(scope);
       foreach (leafs in GetTemplatesRule(startRule, scopeRules))
       {
          yield LiveTemplate(scope.Name, leafs);
       }
     }

     GetTemplatesRule(rule : Rule, scopeRules : list[Rule]): IEnumerable[list[LeafRule]]
    {
       foreach (crule in rule.Rules)
       {
         foreach (gen in GetTemplatesLr(crule.Rules, scopeRules)) yield gen;
       }
     }

     GetTemplatesLr(leafRules : list[LeafRule], scopeRules : list[Rule]) : IEnumerable[list[LeafRule]]
    {
       def (left, current, right) = leafRules.SplitFirst(lr => lr is LeafRule.NonTerminal);
       match (current) {
         | Some ( x is LeafRule.NonTerminal ) =>
           {
             def rule = GetRule(x.Value, scopeRules);

             // Expand first non-terminal rule
             foreach (expand in GetTemplatesRule(rule, scopeRules))
               // Expand tail rules
               foreach (rightExpand in GetTemplatesLr(right, scopeRules))
                 yield left + expand + rightExpand;
           }
           | None => yield leafRules
       }
     }
  }
}
