//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Github.Ulex.ZenSharp.Core;
using NUnit.Framework;

namespace ZenSharp.Core.Tests {
  [TestFixture]
  public class jackTests
  {
    #region Input of ltg
    private string _content= @"// This is the house that Jack built.
// This is the cheese that lay in the house that Jack built.
// This is the rat that ate the cheese
// That lay in the house that Jack built.

tjb      ::= ""that Jack built""=tjb
thisis   ::= ""This is the""=tit
s        ::= "" ""
sentence ::= $sencence par=""value"" par2=""sample"" $
sep      ::= ""-""

scope ""house"" {
  // Test: jack -> some
  base  ::= thisis s sentence
  start ::= base | base sep tjb
}
";
    #endregion Input of ltg
    private GenerateTree _tree;
    [TestFixtureSetUp]
    public void LoadTree(){
      _tree = new LtgParser().ParseAll(_content);
      }
           [Test]
      public void Testjackjack(){
            string input = @"jack";
            var ltm = new LiveTemplateMatcher(_tree);
            var m = ltm.Match(input, @"house");
            var expand = m.Expand(input);
            Assert.AreEqual(@"jack", expand);
        }
       }
  [TestFixture]
  public class TemplatesTests
  {
    #region Input of ltg
    private string _content= @"
// Sample file
space ::= "" ""

// Resharper macros
cursor ::= ""$END$""
manualType ::= ""$type$""

// Fields
field ::= accessField """"=f space type ""$name$"" "";""

identifier ::= $name default=""$name$"" macros = ""contant(""""name"""")""$

// Methods
method       ::= accessMethod space  methodInstStatic space methodDecl
methodDecl ::= type space methodName ""("" methodArgs "") {}""
methodType ::= type | ""void""
methodArgs   ::= cursor
methodName   ::= identifier
methodInstStatic ::= static=M | """"=m
accessMethod ::= private=_ | protected=pr | ""public""

// Auto properties
property        ::= accessProperty space manualType space ""$name{get; "" lazyPrivateSpec ""set;}""
accessProperty  ::= ""public""=p | private=_ | protected=P
lazyPrivateSpec ::= ""private ""=_ | """"

// Plain types
arraySpec  ::= ""[]""=s | """"
type       ::= primType | compType
primType   ::= string=s | byte=b | double=d | int=i

// Complex types
genericArg  ::= ""<"" primType "">""
scgTypes    ::= IList=l | IEnumerable=""~""
generic2Arg ::= ""<"" primType "">""
scg2Types   ::= SortedList=sl | IDictionary=di
SCG         ::= ""System.Collections.Generic""
compType    ::= SCG ""."" scgTypes genericArg | SCG ""."" scg2Types generic2Arg

scope ""InCSharpTypeMember"" {
  start    ::=  method
}

scope ""InCSharpTypeAndNamespace"" {

}
";
    #endregion Input of ltg
    private GenerateTree _tree;
    [TestFixtureSetUp]
    public void LoadTree(){
      _tree = new LtgParser().ParseAll(_content);
      }
       }
}


