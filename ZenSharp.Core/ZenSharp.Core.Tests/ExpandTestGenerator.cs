//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Github.Ulex.ZenSharp.Core;
using NUnit.Framework;

namespace ZenSharp.Core.Tests
{
    [TestFixture]
    public class TemplatesTests
    {
        #region Input of ltg
        public string _content = @"// C# templates
// Sample file

space ::= "" ""

// Resharper macros
cursor ::= ""$END$""
identifier ::= <name default=""$name$"" macros = ""complete()"">
// really bad working now
// suggType ::= <type default=""$type$"" text=""$type$"" macros = ""completeType()""> suggTypeFollower
//suggTypeFollower ::= """"=""_""

// Auto properties
property        ::= accessProperty abstract space type space identifier propertyBody
abstract ::= "" abstract""=a | """"
propertyBody    ::= ""{ get;"" lazyPrivateSpec "" set; }""
accessProperty  ::= ""public""=p | private=_p | protected=P
lazyPrivateSpec ::= """"=""+"" | ""private ""

// Plain types
arraySpec  ::= ""[]""=s | """"
type       ::=  compType | primType arraySpec
primType   ::= string=s | byte=by | bool=b | double=d | int=i | ""System.Guid""=g

// Complex types
genericArg  ::= ""<"" primType "">""
scgTypes    ::= IList=l | IEnumerable=""~""
generic2Arg ::= ""<"" primType "", "" primType "">""
scg2Types   ::= SortedList=sl | IDictionary=di
SCG         ::= ""System.Collections.Generic""
compType    ::= SCG ""."" scgTypes genericArg | SCG ""."" scg2Types generic2Arg


nunittest ::= ""[Test] public void Test"" identifier ""(){ "" cursor "" }""

scope ""InCSharpClass"" {
  start    ::=  method | property | field | other
  method ::= (private=_ | protected=pr | ""public"") space (""static ""=M | """"=m) (type | ""void"") space identifier methodArgs "" { "" cursor "" }""
  methodArgs ::= ""("" cursor "")""
  field ::= (""private""=f | ""private readonly""=F) space type space identifier "";""

  other ::=  """"=test nunittest
}

scope ""InCSharpTypeAndNamespace"" {
  start ::= class
    | interface
    | ""[NUnit.Framework.TestFixture] internal class ""=testf identifier ""{ "" ( nunittest | cursor) "" }""

  class ::= (""internal class""=c | ""public class""=pc | ""private class""=_pc) space classBody
  interface ::= ""internal interface""=i space classBody
  classBody ::= identifier ""{"" cursor ""}""
}

scope ""InCSharpInterface"" {
  accessProperty ::= "" ""=p
  propertyBody ::= ""{get; }"" cursor

  start ::=
    | property
    | "" ""=m type space identifier methodArgs
}

scope ""InCSharpStatement"" {
}

";
        #endregion Input of ltg
        private GenerateTree _tree;
        private LiveTemplateMatcher _ltm;
        [TestFixtureSetUp]
        public void LoadTree()
        {
            _tree = new LtgParser().ParseAll(_content);
            _ltm = new LiveTemplateMatcher(_tree);
        }

    }
    [TestFixture]
    public class jackTests
    {
        #region Input of ltg
        public string _content = @"// This is the house that Jack built.
// This is the cheese that lay in the house that Jack built.
// This is the rat that ate the cheese
// That lay in the house that Jack built.

tjb      ::= ""that Jack built""=tjb
thisis   ::= ""This is the""=tit
s        ::= "" ""
sentence ::= $sencence par=""value"" par2=""sample"" $
sep      ::= "", ""="",""

scope ""house"" {
  base  ::= thisis s sentence
  start ::= base | base sep tjb
  // Test: tithouse -> This is the house
  // Test: tithouse,tjb -> This is the house
}
";
        #endregion Input of ltg
        private GenerateTree _tree;
        private LiveTemplateMatcher _ltm;
        [TestFixtureSetUp]
        public void LoadTree()
        {
            _tree = new LtgParser().ParseAll(_content);
            _ltm = new LiveTemplateMatcher(_tree);
        }


        [Test]
        public void Testtithouse_Thisisthehouse()
        {
            string input = @"tithouse";
            var m = _ltm.Match(input, @"house");
            var expand = m.Expand(input);
			Assert.IsTrue(m.Success);
			Assert.AreEqual(string.Empty, m.Tail, "Tail is not empty");
            Assert.AreEqual(@"This is the house", expand, "Expand diffs");
        }

        [Test]
        public void Testtithousetjb_Thisisthehouse()
        {
            string input = @"tithouse,tjb";
            var m = _ltm.Match(input, @"house");
            var expand = m.Expand(input);
			Assert.IsTrue(m.Success);
			Assert.AreEqual(string.Empty, m.Tail, "Tail is not empty");
            Assert.AreEqual(@"This is the house", expand, "Expand diffs");
        }
    }
}


