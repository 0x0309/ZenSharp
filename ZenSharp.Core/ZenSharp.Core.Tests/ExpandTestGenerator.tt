<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:<#= System.Environment.Version #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Github.Ulex.ZenSharp.Core;
using NUnit.Framework;

namespace ZenSharp.Core.Tests
{
<#
string folder = Host.ResolvePath("Data");
var ltgFiles = Directory.GetFiles(folder).Select(LtgFileInfo.FromFile);
foreach (var file in ltgFiles) { #>
    [TestFixture]
    public class <#= file.FileName #>Tests
    {
        #region Input of ltg
        private string _content = <#= file.ContentString #>;
        #endregion Input of ltg
        private GenerateTree _tree;
        private LiveTemplateMatcher _ltm;
        [TestFixtureSetUp]
        public void LoadTree()
        {
            _tree = new LtgParser().ParseAll(_content);
            _ltm = new LiveTemplateMatcher(_tree);
        }
<#          foreach (var test in file.Tests) {#>


        [Test]
        public void Test<#= test.TestName #>()
        {
            string input = <#= test.Short #>;
            var m = _ltm.Match(input, <#= test.Scope #>);
            var expand = m.Expand(input);
			Assert.IsTrue(m.Success);
			Assert.AreEqual(string.Empty, m.Tail, "Tail is not empty");
            Assert.AreEqual(<#= test.Expand #>, expand, "Expand diffs");
        }<#}#>

    }
<#} // end file foreach
#>
}


<#+

public sealed class LtgFileInfo
{
    public string Path { get; private set; }
    public string FileName { get {return System.IO.Path.GetFileNameWithoutExtension(Path);} }
    public string ContentString { get; private set; }
    public IEnumerable<TestInfo> Tests{get; private set;}

    public static LtgFileInfo FromFile(string path)
    {
        var content = File.ReadAllText(path);
        var tests = new List<TestInfo>();
        var lines = content.Split(new []{Environment.NewLine}, StringSplitOptions.None);

        string curscope = "";
        foreach (var line in lines) {
          var scopeMatch = Regex.Match(line, "scope \"([^\"]*)\"");
          if (scopeMatch.Success) curscope = scopeMatch.Groups[1].Value;

          var match = Regex.Match(line, "// ?Test: ?([^-]*)->(.*)$");
          if (match.Success)
      {
        tests.Add(new TestInfo {
              Short = ToDeclStr(match.Groups[1].Value.Trim()),
              Expand = ToDeclStr(match.Groups[2].Value.Trim()),
        Scope = ToDeclStr(curscope)
            });
      }
        }

        return new LtgFileInfo()
        {
            Path = path,
            Tests = tests,
            ContentString = ToDeclStr(content)
        };
    }
  public static string ToDeclStr(string input)
    {
        return "@\"" + input.Replace("\"", "\"\"") + "\"";
    }

  public class TestInfo
  {
      public string Scope { get; set; }
      public string Short { get; set; }
      public string Expand { get; set; }
      public string TestName { get { return new string((Short + "_" + Expand).Where(ch => Char.IsLetter(ch) || ch == '-' ||  ch == '_').ToArray()); } }
  }
}
#>
