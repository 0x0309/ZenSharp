
// Sample file
space ::= " "

// Resharper macros
cursor ::= "$END$"
manualType ::= "$type$"

// Fields
field ::= accessField ""=f space type "$name$" ";"

identifier ::= $name default="$name$" macros = "contant(""name"")"$

// Methods
method       ::= accessMethod space  methodInstStatic space methodDecl
methodDecl ::= type space methodName "(" methodArgs ") {}"
methodType ::= type | "void"
methodArgs   ::= cursor
methodName   ::= identifier
methodInstStatic ::= static=M | ""=m
accessMethod ::= private=_ | protected=pr | "public"

// Auto properties
property        ::= accessProperty space manualType space "$name{get; " lazyPrivateSpec "set;}"
accessProperty  ::= "public"=p | private=_ | protected=P
lazyPrivateSpec ::= "private "=_ | ""

// Plain types
arraySpec  ::= "[]"=s | ""
type       ::= primType | compType
primType   ::= string=s | byte=b | double=d | int=i

// Complex types
genericArg  ::= "<" primType ">"
scgTypes    ::= IList=l | IEnumerable="~"
generic2Arg ::= "<" primType ">"
scg2Types   ::= SortedList=sl | IDictionary=di
SCG         ::= "System.Collections.Generic"
compType    ::= SCG "." scgTypes genericArg | SCG "." scg2Types generic2Arg

scope "InCSharpTypeMember" {
  // Test: m -> public void $name$($END$) {}
  // Test: M -> public static void $name$($END$) {}
  // Test: _M -> public static void $name$($END$) {}
  // Test: MiTest -> public static int Test($END$) {}
  // Test: _M~i -> private static System.Collections.Generic.IEnumerable<int> $name$($END$) {}
  // Test: _M~sEnu -> private static System.Collections.Generic.IEnumerable<string> Enu($END$) {}
  // Test: MMain,itest -> public static void Main(int test) {}
  // Test: MMain,oitest -> public static void Main(out int test) {}
  // Test: MMain`i,i,itest -> public static void Main<int,int>(int test) {}
  // Test: m~dHello,detest,sbi -> public IEnumerable<double> Hello(decimal test, StringBuiler i){}
  start    ::=  method
}

scope "InCSharpTypeAndNamespace" {

}
