using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;


public class LiveTemplate {
  public Short : string;
  public Expand : string;
  public Scope : string;

  public this(scope : string, rules : list[LeafRule]){
    Scope = scope;
    def expb = StringBuilder();
    def shrb = StringBuilder();
    foreach (rule in rules)
      match (rule){
        | x is LeafRule.String => _ = expb.Append(x.Value);
        | x is LeafRule.ExpandRule => { _ = expb.Append(x.Expand); _ = shrb.Append(x.Short) };
        | _ => ()
      }
    Short = shrb.ToString();
    Expand = expb.ToString();
  }

  public override ToString() : string {
    $"LiveTemplate<$Scope,$Short,$Expand>";
  }
  
  public Xml() : string {
    def esc(str) {System.Security.SecurityElement.Escape(str)};
    $<#<Template uid="$(System.Guid.NewGuid())" shortcut="$(esc(Short))" description="$(esc(Expand))" text="$(esc(Expand))" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="$Scope" minimumLanguageVersion="2.0"/>
    </Context>
    <Variables />
    
    <CustomProperties/>
  </Template>#>
  }
}

[Record]
public class GenerateTree{
  public GlobalRules : list[Rule];
  public Scopes : list[TreePart.Scope];

   public GetTemplates() : IEnumerable[LiveTemplate]{
      foreach (scope in Scopes)
        foreach (liveTemplate in GetTemplatesScope(scope))
          yield liveTemplate;
   }

   GetTemplatesScope(scope : TreePart.Scope) : IEnumerable[LiveTemplate]{
     def scopeRules = GlobalRules + scope.Rules;
     def startRule = scope.Rules.Find(a => a.Name == "start");
     if (!startRule.IsSome)
       throw Exception($"Start rule for scope $(scope.Name) not exist")
     else
       foreach (leafs in GetTemplatesRule(startRule.Value, scopeRules))
       {
          yield LiveTemplate(scope.Name, leafs);
       }
   }

   GetTemplatesRule(rule : Rule, scopeRules : list[Rule]): IEnumerable[list[LeafRule]]{
     foreach (crule in rule.Rules)
     {
       foreach (gen in GetTemplatesLr(crule.Rules, scopeRules)) yield gen;
     }
   }

   GetTemplatesLr(leafRules : list[LeafRule], scopeRules : list[Rule]) : IEnumerable[list[LeafRule]]{
     def (left, current, right) = leafRules.SplitFirst(lr => lr is LeafRule.NonTerminal);
     match (current) {
       | Some ( x is LeafRule.NonTerminal ) =>
         {
           def rule = scopeRules.Find(r => r.Name == x.Value);
           unless (rule.IsSome) throw Exception($"Non-terminal rule '$(x.Value)' is not exist");

           // Expand first non-terminal rule
           foreach (expand in GetTemplatesRule(rule.Value, scopeRules))
             // Expand tail rules
             foreach (rightExpand in GetTemplatesLr(right, scopeRules))
               yield left + expand + rightExpand;
         }
         | None => yield leafRules
     }
   }
}
